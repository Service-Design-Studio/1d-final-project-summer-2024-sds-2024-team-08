# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run

name: Print hello world

on:
    push:
        branches: ["rails-server", "rails-github-actions"]

# env:
#     PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # TODO: update Google Cloud project id
#     GAR_NAME: gcr.io # TODO: update Artifact Registry location
#     GAR_LOCATION: asia-east1 # TODO: update Artifact Registry location
#     SERVICE: ${{ secrets.GCP_PROJECT_ID }} # TODO: update Cloud Run service name
#     REGION: asia-east1 # TODO: update Cloud Run service region

jobs:
    hello:
        runs-on: ubuntu-latest
        steps:
            - name: print hello world
              run: echo "hello world" 
    # deploy:
    #     # Add 'id-token' with the intended permissions for workload identity federation
    #     permissions:
    #         contents: "read"
    #         id-token: "write"

    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v4

    #         - name: Set up Node.js
    #           uses: actions/setup-node@v4
    #           with:
    #               node-version: "18" # Specify the Node.js version

    #         # NOTE: Alternative option - authentication via credentials json, SERVICE ACC
    #         - name: Google Auth
    #           id: auth
    #           # Check latest version: https://github.com/google-github-actions/auth
    #           uses: "google-github-actions/auth@v2"
    #           with:
    #               credentials_json: "${{ secrets.GCP_SA_KEY }}"

    #         # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

    #         # Authenticate Docker to Google Cloud Artifact Registry
    #         - name: Docker Auth
    #           id: docker-auth
    #           run: |-
    #               gcloud auth configure-docker "${{ env.GAR_LOCATION }}-docker.pkg.dev"

    #         - name: Build and Push Container
    #           # ALW host location>project>repo>image!
    #           # https://cloud.google.com/artifact-registry/docs/docker/pushing-and-pulling#tag
    #           run: |-
    #               docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}:${{ github.sha }}" ./
    #               docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"

    #         # END - Docker auth and build

    #         - name: Deploy to Cloud Run
    #           id: deploy
    #           # Check latest version: https://github.com/google-github-actions/deploy-cloudrun
    #           uses: google-github-actions/deploy-cloudrun@v2
    #           with:
    #               service: "${{ env.SERVICE }}"
    #               region: "${{ env.REGION }}"
    #               # NOTE: If using a pre-built image, update the image name here
    #               image: "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"

    #         # If required, use the Cloud Run url output in later steps
    #         - name: Show Output
    #           run: echo "${{ steps.deploy.outputs.url }}"
